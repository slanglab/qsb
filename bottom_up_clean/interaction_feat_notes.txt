    ''' 
    Interaction features give 3 points F1 and make the code 10X slower. If you turn them off
    we are 100x faster than ILP

    Where is the slowdown?
        - vectorizer?
        - dot product?
        - the following 5 loc => No

    ### Is the slowdown in the feature function? If you uncomment the real feature function and comment in a 
    fake one (below) it is 100x faster, suggesting the feature function is not the issue
    
    tmp = {}
    for f in featsg:
        try:
            tmp[f , feats[depf]] = featsg[f] # dep + globalfeat
            tmp[f , feats["type"]] = featsg[f] # type (parent/gov/child) + globalfeat
            tmp[f , feats["type"] , feats[depf]] = featsg[f] # type (parent/gov/child) + dep + global feat
        except KeyError:
            pass

    #### This is the original interaction features...
    ### do interaction features. this gets good F1 but 10x slower, ~.01 sec/sentence
    for f in featsg:
        try:
            feats[f , feats[depf]] = featsg[f] # dep + globalfeat
            feats[f , feats["type"]] = featsg[f] # type (parent/gov/child) + globalfeat
            feats[f , feats["type"] , feats[depf]] = featsg[f] # type (parent/gov/child) + dep + global feat
        except KeyError:
            pass

    ## this gets 1 point worse F1 and is ~.01 sec/sentence. not a 1-hot b/c values are ints
    for f in featsg:
        try:
            feats[f , feats[depf]] = 1 # dep + globalfeat
            feats[f , feats["type"]] = 1 # type (parent/gov/child) + globalfeat
            feats[f , feats["type"] , feats[depf]] = 1 # type (parent/gov/child) + dep + global feat
        except KeyError:
            pass

    ## If the vectorizer enforces 1-hot encoding it lowers F1 but speeds up the process 10X. huh.
    '''